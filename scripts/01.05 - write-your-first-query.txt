Welcome back!

The time has come to write your first Firebase query.

In under five minutes we're going to connect to the Firestore database and query some public data.

We'll cover this subject in depth in the Firestore section of this course, but for now, let's just see Firestore in action.

We're going to query some data that I saved to Firestore and made publicly readable.

We're also going to use Glitch.com, which is a handy tool for creating small demo apps in a web browser.

We'll get started by navigating to github.com/how-to-firebase/tutorials.

Take a second to pause and get to that web page, because you'll want to follow along.

Again, that's github.com/how-to-firebase/tutorials

Now scroll down to the write-your-first-query folder and click through.

All of the demo files are in this folder, but scroll down a bit to find the "Write Your First Query" link.

This link takes us over to a Glitch project.

We're starting out with a basic index.html file.

Let's click on the "Show" button on the top-left of the page to open up a live preview of our project.

Right-click Inspect Element to pop open DevTools

You can use the three-buttons menu to reposition DevTools as needed.

Now navigate to DevTool's Console tab.

Great. The page is loading and logging out "TODO: get people!"

Now pop back to our Glitch Project to code it up.

Notice that there are three script tags. 

The script tag on line 10 imports the core Firebase SDK.

Line 11 imports the Firestore SDK.

Line 14 references the url for the Firebase project that's hosting this data.

This project is called How To Firebase: Tutorials. 

Every Firebase project has an init.js file that will automatically initialize the Firebase SDK to that particular project. 

It's always available at the project URL, slash underscore, underscore, slash, firebase, slash init.js

We're going to write the getPeople function on line 17.

The comment shows that we have a nested data structure. The top-level collection is called "public".

"public" has a doc within it named "write-your-first-query".

and "write-your-first-query" has a sub-collection within it named "star-wars-people".

Let's start by writing a reference to the collection.

Firestore references always follow a pattern of collection then doc. In this case, we're two collections deep.

Once we have the collection reference, we'll call .get() on the collection.

Notice line 17. 

We've used the async keyword on line 17 to make this an async function.

Now we'll use the "await" keyword on line 27 to wait for the asynchronous .get() call to return.

.get returns a collection snapshot.

Collection snapshots have a "docs" attribute that holds an array of all docs in the snapshot.

So let's call .forEach() on the docs attribute and console.log out each doc.id and doc.data().

And the code is done.

Let's switch back to the live preview that we opened earlier and we can see that all of the data is logging out just as expected.

How easy was that!

Firebase's browser SDK makes interacting with the database so, so simple. 

Feel free to pause here for a bit and play around on Glitch, and I'll see you in the next video!






