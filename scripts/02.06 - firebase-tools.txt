You've used the Firebase Console.

You've connected with a browser.

You've connected with Node.js.

Now it is time to complete your training and connect with the Firebase Tools CLI.

CLI stands for command-line interface.

There are some tasks that are just easier to complete via the terminal.

We use the Firebase Tools CLI to configure projects and to deploy Firebase Hosting and Cloud Functions.

Let's stick to our pattern and create a new Node Project on Glitch.com.

Open your project's Advanced Options and click Open Console

The Glitch console or terminal--we'll use the terms interchangeably--runs Ubuntu Linux

It has NPM installed, so we'll run npm install dash dash save dash dev firebase dash admin

The console throws some warnings, but it will install firebase-tools locally.

Once the install is complete, type firebase dash dash version to check your installed version.

Now type just "firebase" to see all of your options

You'll see a long list of "commands" that you can execute.

We'll learn the most common commands and you can return to this list to learn the rest as needed.

Let's start out with firebase login. 

Type "firebase login dash dash no dash localhost" into your console.

Your console will read out a link that you'll need to follow to complete the login process.

Copy/paste the resulting authorization code into your console to complete login.

Now type "firebase list" to list your active projects.

If you don't have any Firebase projects listed, you'll want to create a project in your web Console.

Once you have results from running "firebase list", you're ready to initialize your project.

Run "firebase init" to initialize your directory to use Firebase.

Use the spacebar and your up and down arrows to select all of the little check boxes

We'll go ahead and use all of the Firebase features. 

It doesn't cost us anything.

Confirm your selections and pick your project, again with the arrow keys...

Then accept all of the defaults except for one.

You want to select Y for "yes" when asked if you want to configure a single-page app.

Glitch doesn't automatically sync the console and the editor quite yet, so type "refresh" and "enter"

You should now have an initialized project and be able to view your files in the Glitch editor.

All that Firebase Tools did was create a bunch of configuration files.

Go ahead and click around a bit through the new files to see what's been configured.

We'll cover more Firebase Tools functions as we continue through the course.

For now just remember that you can always type "firebase" to read out the commands.

Also, "firebase login" will authenticate a new machine and "firebase init" creates these files.

And all of this means that congratulations are in order!

You've completed the installation steps and have a fully-operational Firebase project!

Some of this may have seemed a bit magical.

Some of this may not yet make sense.

But stick with it! 

We're building a fresh, new skill set, and that doesn't happen overnight.

Hang in there. Stay patient. 

And you'll be a seeing awesome results before you know it!







