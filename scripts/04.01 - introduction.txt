Cloud Firestore is the successor to Google's Cloud Datastore and the original Realtime Database.

Cloud Datastore already powers huge web applications...

...and the Realtime Database proved the usefulness of direct browser-to-database interactions. 

Cloud Firestore starts with the scalability and reliability of Cloud Datastore...

...and adds awesome client libraries like we have with the Realtime Database...

...to create a massively scalable, easily-to-develop cloud database platform.

Cloud Firestore is a document/collection database like MongoDB or CouchDB. 

Document/collection means that you create collections and nest documents within those collections. 

A nested document may itself have a sub-collection of documents.

Unlike a relational database, there are no other formal ways to connect documents.

The parent/child relationship is the only relationship that Firestore understands...

...but that won't stop us from writing our own logic to connect documents.

If you'd like one document to reference another document...

...simply save the target document's ID to a field in the referencing document.

Imagine a data structure with two collections, Users and Transactions. 

Each User document has a userId and an email. 

Likewise, we have collection of Transactions where each transaction has a userId and an amount.

The userId fields can be used to connect records in the two collections...

...but it's an informal connection defined by our application logic, not by the database itself.

In a relational database you would be able to join Users to Transactions based on the shared userId

In a document/collection DB that is not possible. 

Instead, you'd run two queries, one on each collection, and then join the records manually.

So why not use a relational database?

Relational databases and document/collection databases have quite a bit of overlap. 

Frankly, either type of database will be just fine as long as you structure your data correctly

The advantage of document/collection databases like Firestore is scalability and speed.

Your database doesn't have to lock down a bunch of relationships to shard data across servers...

...it just copies the documents for fast, reliable horizontal scaling.

Also, you cannot write a slow query with Cloud Firestore.

Go ahead and try it.

The entire database is written for speed and reliability.

And that's what makes client libraries possible.

See, relational databases require schemas. 

Relational databases require table updates.

Document/collection databases can be flexible, meaning that you save whatever data you like.
 
The database just does not care about document structure.

So I could make a collection of Foods, and each Food could have entirely different attributes...

...and the database doesn't mind.

For example, my Foods collection could have a Food called spaghetti 

...with a noodleType attribute and a sauceFlavor attribute. 

The Foods collection could contain another Food called a sandwich... 

...which has a breadType and a hasPickles boolean flag.

Each Food document has entirely different fields, and the database doesn't care one bit.

And that gives us the flexibility to use client libraries.

So what is a client library?

Traditional application architecture includes a layer of servers that talk to your database. 

So your client--in this case a browser--will make an HTTP call to your server...

...which will perform security checks, query the database, and return results to the client.

Serverless application architecture has the browser communicating directly with the database. 

The database runs all of its own security checks and serves up data as requested.

The Firestore SDK is a client library that enables your browser to talk directly to Firestore. 

This is huge, because you don't have to write any server code. 

All of that time crafting REST APIs or implementing GraphQL is unnecessary!

Now let's recognize, before we go any further, that Cloud Firestore has limitations.

Cloud Firestore is not great for highly relational data.

Relational databases are optimized for relational data. 

For example, if you're building an inventory system and with changing inventory counts... 

...and each inventory item can belong to a number of categories...

...and you need to quickly run reports on different stock levels for different category groups... 

...you might want to stick to a relational database.

Cloud Firestore can also be sub-optimal for graph data.

Graph databases such as JanusGraph are optimized for graph data. 

Imagine a social app that needs to query how many of a user's friends live in nearby cities...

...but also needs to query how many of those friends' friends live nearby.

This is a classic graph data problem, and you should consider using a graph database.

Both of these use cases--relational and graph data--can be modeled in Cloud Firestore; 

however, the queries may run more slowly and cost more than if you used a dedicated database.

And that brings us to hybrid solutions.

Just because you need a relational database does not mean that you must abandon Firestore!

Most large web applications use a variety of datastores. 

For instance, a website may use Redis for caching...

...use GraphQL + JanusGraph + Cassandra for social data...

...store financial data in relational SQL...

...and use Firestore for user accounts and the rest of the data models.

Yes, this sort of system adds complexity...

...and we don't recommend introducing any more complexity to your app than is necessary; 

however, complex problems often require complex solutions.

Pick the right tool for each job and don't be afraid of necessary complexity.

We recommend starting with Firestore until you discover that it won't meet your needs. 

You may be surprised at how flexible and powerful Firestore can be...

...and you might just finish your app without needing any other database.






