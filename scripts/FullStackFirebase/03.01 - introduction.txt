You need Firebase Authentication for two reasons:

Number one, Firebase Security Rules rely on Firebase Authentication

And number two, Firebase Authentication is ridiculously easy to use

So why does Firebase need a security system?

In a traditional database you provide your own security using your API server. 

Since Firebase is the API server, it needs a way to control read and write access to your data.

When client apps authenticate with Firebase, they receive a JSON Web Token or JWT.

JWTs identify users to Firebase's security rules system. 

We'll cover this more later. 

Just remember that Firebase Authentication enables users to interact with the Firebase platform.

So let's talk ease of use.

Have you ever implemented your own auth system? 

Yes? Then you know how challenging it can be. 

If not... take my word for it and use an off-the-shelf system. 

Firebase Authentication supports a variety of ways to log into your apps.

These authentication methods include:

Email and password, Phone SMS, Log in with Google...

..and also Log in with Facebook, Twitter, and Github

You can even roll your own custom authentication or integrate with a third-party auth system.

So let's do a quick overview of these auth methods.

First off is email/password auth, which is exactly as it sounds.

You register an email address and a password with Firebase and it keeps track of your user account.

There's nothing more to it.

Next up, SMS auth!

Google acquired Twitter Digits in early 2017 and rolled their phone authentication into Firebase. 

This means that with minimum fuss you can implement a full SMS-based phone auth flow.

This is particularly great for mobile web apps. 

Many users prefer phone authentication, especially outside of the United States.

And next we have OAuth.

OAuth is a standard way to authenticate through a third-party.

You know those buttons around the web that say "Log in with Facebook" or "Log in with Twitter"?

That's OAuth.

Firebase supports OAuth with Google, Facebook, Twitter and GitHub.

OAuth is the fastest auth method, because it relies on accounts that your users already have. 

Most everyone has either Google, Facebook or Twitter, and developers love Github. 

OAuth is also the easiest auth flow to implement.

And all of the OAuth providers support multi-factor authentication.

Multi-factor auth uses a code generator app on your phone or a one-time code delivered via SMS.

Multi-factor auth is much, much more secure than single-factor email/password auth.

You should opt-in to use multi-factor whenever possible.

There are no excuses. 

Do not get hacked. 

Use multi-factor auth!

Ok. 

End rant.

Finally, Firebase Authentication supports custom auth tokens.

This is only relevant if you're trying to integrate with an existing auth system.

Does your company use SAML or LDAP?

Awesome. That's going to work just fine. 

Your existing auth servers can mint Firebase JWTs to give users access to their Firebase services.

In conclusion, Firebase Auth is one of the simplest and highest work-to-value services around.

It requires minimal dev time and provides an integrated security system for all Firebase apps.







