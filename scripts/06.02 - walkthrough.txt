Cloud Functions is not for the faint of heart.

It's extremely powerful, but it can drive you crazy.

Fortunately for you, we've developed great methods for developing Cloud Functions...

...and we'll teach you all of them in the coming videos.

But for now, let's walk through some Cloud Functions code on Glitch.com.

It's the chat app that we walked through earlier, but this time, it has Cloud Functions.

We'll start on "functions slash index dot js"

This file is the entry point for all Cloud Functions for Firebase.

We're importing the firebase functions library as well as a local library named "stats"

"stats" is the function that we're going to execute.

To attach stats to Cloud Functions we call "functions dot database dot ref".

"Dot ref" takes a string representing the path to which we'd like to listen...

...with curly braces around wildcard parameters, in this case "room" and "key".

Then we call "dot onCreate" and pass in our stats function. 

Now our stats function will run any time data is created on a matching path.

So let's inspect our stats function.

Every event is a bit different. 

In this case we're listening to a Realtime Database onCreate event.

onCreate functions get called with two parameters, the database snapshot and a context object.

The first few lines of our stats function pull variables off of our context object and snapshot.

We use those variables to defined two Realtime Database refs.

Once we have our refs we can calculate our stats.

We'll do those calculations with two transaction functions.

We're using transactions because Cloud Functions does not guarantee execution order.

If we quickly create hundreds of records, our functions will likely execute out of order.

Realtime Database transactions are functions that take the existing value from the db...

...complete the necessary modifications, and return a new value.

Our two transactions increment a couple of counters and track some user activity.

The code here isn't important... it's just some arbitrary tracking data we chose to collect.

What is important is that our Cloud Function returns a promise.

Cloud Functions requires that we return a promise if we are executing asynchronous code.

If you fail to return a promise your asynchronous code may fail to execute...

...and Cloud Functions will throw nasty errors to your logs.

We've used "Promise dot all" to guarantee that this function will not return prematurely.

Now let's see this function in action.

We'll open our Glitch web preview first.

Now let's open our Firebase Realtime Database console next to it.

This is a simple chat app, so let's add some messages and watch the data flow through.

Over on our console we can see the data flowing into the chat room.

We can also see the stats records getting incremented and overwritten.

Finally, if we go to our Cloud Functions logs we can track each execution.

Cloud Functions is the glue that holds the Firebase platform together.

You'll need Cloud Functions to take your Firebase apps to production...

...so pay close attention to the coming videos.

There's a lot to learn, and it may help you level up significantly as a developer.





