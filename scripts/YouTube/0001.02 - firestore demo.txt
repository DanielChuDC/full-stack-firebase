Welcome back!

Hopefully you've seen our earlier video about Firebase vs Firestore...

and you're ready to see Firestore in action.

We're going to do a quick demo using a public Firestore collection

You can remix this code on Glitch.com.

See this video's description for a link to the Glitch.

Pause here for a minute to get that Glitch open so that you can follow along.

We'll work on index.html. You can see the completed code in complete.html.

Index.html starts by pulling in three external files via script tag.

The first is firebase-app.js which contains the core Firebase SDK.

The second is firebase-firestore.js which contains the Firestore-specific SDK.

And the third script tag pulls in the init.js file for the Firebase project that we're using.

This project is named How To Firebase Tutorials with dashes between each word for the url.

Every Firebase project that has hosting enabled will have this init.js file publicly accessible.

Now let's write our query.

The function we're going to fill out is called getPeople.

Notice that it's an async function that takes a single argument, gender, that defaults to 'male'. 

This data lives in a parent collection called 'public'. 

This project has a security rule that exposes all docs and sub-collections under the 'public' collection as world-readable.

The glitch already has the db and the collection defined. 

Notice that we've followed the standard collection-then-document pattern required by Firestore.

The top-level collection is 'public', followed by a doc named 'cloud-firestore'

and below that is another collection named 'star-wars-people'.

We're going to query 'star-wars-people'.

Let's add a where-clause to the collection query.

and while we're at it we can add two order by queries, one for 'height' and another for 'mass'.

There's not much data here, so the orderBy statements won't make much difference...

... just note that you can stack multiple where and orderBy clauses in a single query.

Now let's call .get() on our query, making sure to use the await keyword

We use await because .get() is an asynchronous function.

.get() returns a snapshot, which contains an array of docs.

Each doc has an 'id' property and a 'data' function.

We'll call .map on snapshot.docs to convert the docs into something readable.

.map is awesome because it takes an array and lets us run a mapping function to convert each value into something more useful.

In this case each value is an individual doc. 

We want to return easily readable JSON objects, so we'll extract some data from each doc in the mapping function.

First we'll assign doc.id to underscore-underscore-id.

Next we'll use the three-dot spread operator to extract all values from doc.data() into our result object.

This is a single-line arrow function, also known as a lambda.

If arrow functions are confusing to you, don't freak out. 

They're just an alternative function syntax.

Arrow functions, or lambdas are great for one-liners like this.

In this case we're taking in 'doc' as an argument and returning a JavaScript object.

The first attribute for this object is underscore-underscore-id.

The rest of the attributes are inherited from doc.data() because we used the spread operator.

The spread operator takes an object, in this case the result of doc.data(), and 'spreads' its attributes out to the parent object.

We'll see the results of this spread operator in a minute.

But first, let's read the rest of this code.

We've just filled in the getPeople function. 

Instead of returning an empty array, we're now returning the mapped snapshot docs.

Notice that getPeople is being called twice within the runQueries function.

runQueries is another async function, because it's calling get people, which is also an async function.

runQueries calls getPeople once for 'male' and once for 'female', awaiting the results each time.

then runQueries calls console.table to pretty-print the results of each query.

Finally notice that we've called runQueries() at the bottom of the script tag.

We don't need to use the await keyword when calling runQueries, because we don't care about the result.

You can always fire and forget with async functions... as long as you don't need the result.

Now let's use the "show" button to view our page.

Show will open a new tab. 

We're logging our results to the console, so we'll need to open DevTools to view our page's console.

Chrome has the easiest-to-use DevTools, but you'll get the same results with Firefox or even Edge or Safari.

Once you have DevTools open to your JavaScript console, you may need to refresh the page.

Now notice that we have two tables logged out.

The first table has our male dataset and the second has our female dataset.

Our height sort has clearly worked.

We can't see the results of the secondary mass orderBy... but it worked as well.

One last note.

If you play around with the orderBy and where clauses a bit you may get an index-not-found error.

Firestore requires that an index be built for each unique multi-clause query.

Single Firestore fields are indexed by default.

But you'll have to create indexes if you have multiple where or orderBy clauses.

The error in your JavaScript console will read "Error: The query requires an index".

... and it will give you a link to create that index.

You don't have admin access to this Firebase project, so you can't follow the link.

But you can easily follow the link for your own projects and generate your indexes.

Now that I know that was fast.

And maybe it was furious too.

Databases are complicated beasts.

You can play around with this glitch, or hop on over to FullStackFirebase.com for more written material.

As always, the Firebase Docs are fantastic and will answer a lot of your questions.

And you can find ALL of the links in the description.







