Our first task is to get Firestore on our page.

As we mentioned earlier, this is only necessary while Firestore is still in beta.

You'll open up `public slash index dot html` and make a copy of the script tag on line 24.

Simply paste that line down to line 25 and change the filename to `firebase dash firestore dot js`.

Make sure that your local server is running with `yarn start`, then hit your local app on localhost.

Open up the DevTools console and type `firebase dot firestore` and `enter`.

Firestore should be a function. If it's undefined, then refresh the page and check again.

Now that we have Firestore on the page, we can start wiring up our Firestore observers.

We'll start in `src slash database slash add dash note dot js`.

After the first challenge prompt, create a ref named `notesCollection`.

After the second prompt, use `omitEmptyValues` to create a cleaned version of `note`.

Then use `notesCollection dot add` to add the `cleanedNote` to the database.

Now hop back to localhost and attempt to add a note.

The note won't appear in the notes list, so navigate to your Firebase console and check your DB.

If all went well, you'll see the note in your 'notes' collection in Firestore.

Now let's query our notes with `src slash database slash get dash notes dash observable dot js`.

We'll need to define the `notesCollection` again, so do that after the first prompt.

After the second prompts, use a `where clause` on `notesCollection`...

...to query records where the `owner` attribute equals the `uid` variable from line 13.

Then start the onSnapshot listener and pass all resulting snapshots into the `mapDocs` function.

Message out the results of mapDocs using `observer dot next`.

This is the observable-specific code.

The last part of wiring up an observable is to return an `unsubscribe` function.

Fortunately, Firestore's onSnapshot function returns an `unsubscribe` function...

...so we can simple return that function so that our observable can unsubscribe.

Check out `src slash store slash notes dot js` lines 29 and 46 to see this observable in action.

You might want to set up some debugging using `console dot table` to read out the `docsData`...

...and then hit your localhost to test that everything is working.

You should see the note that you created in the previous step.

But if you try clicking through the note's detail view, it the app will crash horribly.

So let's fill out `src slash database slash get dash note dash observable dot js`.

Again, define a `notesCollection` after the first prompt.

After the second prompt defined a variable named `docRef` using `notesCollection dot doc`...

...and passing in the `noteId` variable.

Now move to the third and final prompt.

We'll do the same thing that we did earlier, but this time we're listening to `docRef`.

Call `docRef dot onSnapshot` and pass the resulting `doc` into `formatDoc`.

Pass the formatted doc into `observer dot next`.

And don't forget to return out the `unsubscribe` function.

Then hit up your localhost app and try clicking through to a note.

You may need to reload the page a couple of times to make sure that your changes have gone through.

Now let's update our note.

Navigate to `src slash database slash update dash note dot js` to write the update code.

Again, define 'notesCollection', and after the second prompt, define `docRef` as well.

Now call `docRef dot update` and pass in the `cleanUpdates` variable.

Now jump back to your localhost app and try making an update to your note.

You may need to refresh the page a couple of time, but you should be able to update notes.

Finally, let's remove our note.

Open up `src slash database slash remove dash note dot js` and define `notesCollection` as before.

Now define `docRef` after the second prompt and then call `docRef dot delete`.

Now try deleting your note... and it should be gone!







