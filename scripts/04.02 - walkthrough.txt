It's time to see Firestore in action.

But we have one quick note before diving in.

We're about to visit Fogo dot how to Firebase dot com.

Fogo is a live production application.

So the code you're about to see is complicated, because the app is complicated.

Fogo took weeks to build, and we don't expect you to understand the code.

We just want you to see real-life, production-grade Firestore.

The internet is full of simple little demo apps that make everything look so easy.

But real-life apps are all complicated...

...and we can't be scared off just because we don't understand something.

You'll understand all of this after a few more lessons.

So let's get started with Fogo.

Fogo is an image-management application, and as such, it needs to handle thousands of images.

We would never attempt to display thousands of images in a browser, so we'll paginate our results.

We've implemented a form of infinite-scroll pagination...

...where a new page is requested whenever the bottom of the list becomes visible to the user.

Firestore collections can be easily paginated with a cursor.

The word cursor is just fancy database speak for the last record a query has returned.

So let's load Fogo's main images list and step through these queries.

We'll start with a breakpoint in images dot query dot js.

imagesQuery handles the initial and all subsequent page loads.

If there's no data in the store, it loads the first page of records.

If there is data in the store, it looks at the last result, which we've called the cursor...

...and it modifies the query to start after that cursor and grab the next page.

Line 5 shows that our collection is named "uploads". 

Line 6 is a simple where clause to limit the query to our current environment.

We've tagged all image records with an environment flag.

This way we can support multiple instances of the app on a single Firebase project.

And then, on line 7, we order by a created timestamp in descending order.

This way we get the newest records first.

Then line 8 sets a limit on the number of records to return using the dot limit function

Line 9 is where the pagination is done.

If we call imagesQuery with a cursor, we'll use startAfter to paginate off of cursor dot created

If there is no cursor, then we skip the pagination and the query is just the limitedCollection

Line 11 awaits query dot get, and lines 12 through 21 process the results

Our first time through this query returns our 25 most-recent results.

Let's scroll down to trigger another page load...

and this time there's a cursor, so we've started after that cursor and we get the next page.

imagesQuery is great for paginating existing records, but it can't handle new records 

For that, we'll set a breakpoint in images dot observer dot js.

imagesObserver uses onSnapshot to listen to new records as they're added.

You'll notice that lines 6 through 11 look familiar from the last query...

but line 10 is new, because it's going to use a where clause to only query new records

We pass in a lastCreated timestamp to indicate the most recent record that the app has seen...

...and imagesObserver now only returns records with a more recent timestamp than lastCreated.

Line 14 uses onSnapshot to start listening to the collection.

Each snapshot returned by onSnapshot will have all of the newer records. 

So if we add one new image, the snapshot will include that image...

...and if we add another image, onSnapshot will fire a second time, but this time with both images.

Lines 15 through 23 are some application-specific logic to process the incoming records...

...and also to remove any duplicates from earlier onSnapshot events.

So let's add an image to watch onSnapshot fire.

onSnapshot fires with an empty snapshot when it's first called, because there are no new records.

But then the new records hit Firestore, and onSnapshot fires again...

...this time with a single record in snapshot dot docs.

And that's it!

We have infinite-scroll pagination as well as a listener that handles realtime updates.

And we achieved this epic feat with under 50 lines of code.

We've written this behavior before with the Realtime Database...

...and it was well over 100 lines of code, and pagination was much more confusing.

These queries may seem a bit complicated, because they are.

So don't worry if you didn't understand this code.

We'll clear it all up, step by step, in the coming videos.








